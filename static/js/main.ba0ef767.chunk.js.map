{"version":3,"sources":["components/Task.js","App.js","components/ArtistList.js","serviceWorker.js","index.js"],"names":["Task","react_default","a","createElement","className","this","props","artista","key","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","groups","name","photo","state","rows","singers","forEach","artist","alt","width","src","push","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAWeA,0LAPX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZC,KAAKC,MAAMC,QAAQC,YAJTC,cCuHJC,GCtHUD,wBDEvB,SAAAC,EAAYJ,GAAM,IAAAK,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,GAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,IAEN,IAAMW,EAAS,CACb,CACET,IAAO,QACPU,KAAQ,UACRC,MAAS,qHAEX,CACEX,IAAO,QACPU,KAAQ,OACRC,MAAS,qHAEb,CACEX,IAAO,QACPU,KAAQ,WACRC,MAAS,qHAEb,CACEX,IAAO,QACPU,KAAQ,UACRC,MAAS,sHAGTR,EAAKS,MAAM,CAAEC,KAAM,CACjBpB,EAAAC,EAAAC,cAAA,KAAGK,IAAI,KAAP,sBACAP,EAAAC,EAAAC,cAAA,KAAGK,IAAI,KAAP,sBACAP,EAAAC,EAAAC,cAAA,KAAGK,IAAI,KAAP,sBACAP,EAAAC,EAAAC,cAAA,KAAGK,IAAI,KAAP,wBAED,IAAIc,EAAQ,GA/BG,OAgCfL,EAAOM,QAAQ,SAACC,GACCvB,EAAAC,EAAAC,cAAA,SAAOK,IAAKS,EAAOT,KAChCP,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKsB,IAAK,SAASC,MAAM,MAAMC,IAAKV,EAAOE,YAKnDG,EAAQM,KAAK3B,EAAAC,EAAAC,cAAA,0BAAkBqB,EAAON,SAGxCP,EAAKS,MAAM,CAACC,KAAMC,GA7CHX,wEA6FhB,OACEV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,OAAOC,MAAO,KAAKC,IAAI,wBAElC1B,EAAAC,EAAAC,cAAA,MAAIuB,MAAM,OACVzB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gCAKRF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQyB,YAAY,uBACpCxB,KAAKe,MAAMC,aA9GAZ,cEQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba0ef767.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Task extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Task\">\r\n        {this.props.artista.key}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Task;","import React, { Component } from 'react';\nimport './App.css';\nimport ArtistList from './components/ArtistList'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    const groups = [\n      {\n        \"key\": \"A0001\",\n        \"name\": \"BIGBANG\",\n        \"photo\": \"https://lastfm-img2.akamaized.net/i/u/770x0/4e35a9009004adfe10b1624de2c09171.jpg#4e35a9009004adfe10b1624de2c09171\"\n      },\n      {\n        \"key\": \"A0002\",\n        \"name\": \"GOT7\",\n        \"photo\": \"https://lastfm-img2.akamaized.net/i/u/770x0/3efa8da6323b2294edf066bc05938434.jpg#3efa8da6323b2294edf066bc05938434\"\n    },\n    {\n      \"key\": \"A0003\",\n      \"name\": \"G-DRAGON\",\n      \"photo\": \"https://lastfm-img2.akamaized.net/i/u/770x0/ff816cf987e76af74cc95f7f68ec1b20.jpg#ff816cf987e76af74cc95f7f68ec1b20\"\n  },\n  {\n    \"key\": \"A0004\",\n    \"name\": \"Cardi B\",\n    \"photo\": \"https://lastfm-img2.akamaized.net/i/u/770x0/0a96110d2e2629a881e848c5958bbe7e.jpg#0a96110d2e2629a881e848c5958bbe7e\"\n},\n    ]\n    this.state={ rows: [\n      <p key=\"1\">Here is the artist</p>,\n      <p key=\"2\">Here is the artist</p>,\n      <p key=\"3\">Here is the artist</p>,\n      <p key=\"4\">Here is the artist</p>\n    ]}\n     var singers=[]\n     groups.forEach((artist)=>{\n       const singer = <table key={groups.key}>\n         <tbody>\n           <tr>\n             <td>\n               <img alt =\"poster\" width=\"100\" src={groups.photo}/>\n             </td>\n           </tr>\n         </tbody>\n       </table>\n       singers.push(<p> Artist Name: {artist.name}</p>)\n\n     })\n     this.state={rows: singers}\n\n  }\n//component for request\n/*   componentDidMount()\n  {\n    fetch(\"http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=cher&api_key=e941da3543824deaddb92310754b2a2d&format=json\")\n    .then((Response)=>Response.json())\n    .then((findresponse)=>\n    {\n      console.log(findresponse.artist)\n      this.setState({\n        data: findresponse.artist,\n      })\n     \n    })\n  }\nrender()\n{\n  return(\n    <div>\n    {\n      this.state.data.map((artistData,i)=>\n      <div>\n\n      </div>\n      )\n    }\n    </div>\n  )\n\n}\n\n} */\n\n/* class App extends Component {\n\n  constructor (props){\n    super(props)\n    this.state = {\n      data: '',\n    }\n\n)\n  }\n*/\n\n  render () {\n    return (\n      <div>\n      <table className=\"titleBar\" >\n        <tbody>\n          <tr>\n            <td>\n              <img alt=\"icon\" width =\"50\" src=\"spotify-brands.svg\" />\n            </td>\n            <td width=\"20\"/>\n            <td>\n              <h2>Ranking Artist</h2>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <input className=\"imput\" placeholder=\"Busca a tu artista\"/>\n      {this.state.rows}\n      </div>\n    );\n  };\n  \n} \n\nexport default App;\n","import React, { Component } from 'react'\r\nimport Task from './Task';\r\n\r\nclass ArtistList extends Component {\r\n\r\n  state = {\r\n    artistas: [\r\n      {\r\n        \"key\": \"A0001\",\r\n        \"name\": \"BIGBANG\",\r\n        \"photo\": \"https://lastfm-img2.akamaized.net/i/u/770x0/4e35a9009004adfe10b1624de2c09171.jpg#4e35a9009004adfe10b1624de2c09171\"\r\n      },\r\n    ]\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ArtistList\">\r\n      {this.state.artistas.map((artista, index)=>{\r\n        return(\r\n          <Task\r\n            key={index}\r\n            artista={artista}\r\n          />\r\n        )\r\n      })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ArtistList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* import React from 'react'\r\n\r\nclass ArtistRow extends React.Component {\r\n  render() {\r\n    return  <table key={this.props.artist.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt = \"poster\" width=\"400\" src={this.props.artist.photo} />\r\n            </td>\r\n            <td>\r\n              {this.props.artist.name}\r\n              <p>{this.props.artist.overview}</p>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table> \r\n \r\n  }\r\n}\r\n\r\nexport default ArtistRow */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}